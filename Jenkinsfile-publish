#!/usr/bin/env groovy

def utils = fileLoader.fromGit('jenkins-pipeline-job-utils.groovy', 'git@repos.wvholdings.com:mobile/pipeline-helper-scripts-android.git', 'master', '5ee47e5e-00fb-43a5-9ccd-f5aa5a5310ee', '')
def buildParams = [:]

utils.runBuild('android', getNotifier(utils)) {
   stage('prepare build') {
      buildParams = generateParams(isPullRequest(), isInternalOnly())
      println "Build params: $buildParams"
   }
   stage('checkout') {
      def branches = (isPullRequest() ? scm.branches : [[name: "origin/${buildParams.branch}"]])
      checkout([
            $class                           : 'GitSCM',
            branches                         : branches,
            userRemoteConfigs                : scm.userRemoteConfigs,
            submoduleCfg                     : [],
            doGenerateSubmoduleConfigurations: false,
            extensions                       : [
                  [$class: 'CleanBeforeCheckout'],
                  [$class : 'CloneOption',
                   shallow: true,
                   depth  : 1000,
                   noTags : true,
                   timeout: 5]
            ]
      ])
   }
   stage('assemble') {
      withCredentials([file(credentialsId: 'dreamtrips-android-signing-key', variable: 'SIGNING_KEY'),
                       file(credentialsId: 'dreamtrips-android-signing-properties', variable: 'SIGNING_PROPS')]) {
         utils.scripts.bash("chmod +rx ${SIGNING_KEY}")
         utils.scripts.bash("chmod +rx ${SIGNING_PROPS}")
         utils.scripts.bash("cp -f ${SIGNING_KEY} signing")
         utils.scripts.bash("cp -f ${SIGNING_PROPS} signing")
         utils.scripts.gradlew "app:assembleExternal${buildParams.streamFlavor}${buildParams.serverFlavor}${buildParams.apkBuildType} ${buildParams.buildArgs}"
      }
   }
   stage('publish') {
      if (isInternalOnly()) {
         archiveArtifacts artifacts: 'app/build/outputs/apk/*.apk', caseSensitive: false, onlyIfSuccessful: true
      } else {
         def releaseNotes = generateReleaseNotes(buildParams, changelog(utils, buildParams.targetBranch, buildParams.branch), isPullRequest())
         echo releaseNotes
         def apkPath = "app/build/outputs/apk/DreamTrips-external-${buildParams.streamFlavor.toLowerCase()}-${buildParams.serverFlavor.toLowerCase()}-${buildParams.apkBuildType.toLowerCase()}.apk"
         step([$class   : 'HockeyappRecorder', applications:
               [[apiToken          : params.hockeyApiToken,
                 filePath          : apkPath,
                 downloadAllowed   : true,
                 mandatory         : false,
                 notifyTeam        : true,
                 releaseNotesMethod: [$class: 'ManualReleaseNotes', releaseNotes: releaseNotes, isMarkdown: true],
                 uploadMethod      : [$class: 'VersionCreation', appId: buildParams.hockeyAppId]
                ] << (
                     buildParams.hockeyAppTeams.isEmpty() ? [:] : [teams: buildParams.hockeyAppTeams.join(',')]
               )],
               debugMode: false, failGracefully: true
         ])
      }
   }
   if (isPullRequest()) stage('notify') {
      def links = hockeyInstallationLinks(currentBuild.rawBuild.getActions(hockeyapp.HockeyappBuildAction.class))
      def text = "Published to HockeyApp:\r\n* Public link:\r\n${links.public}\r\n* Private link:\r\n${links.private}"
      getNotifier(utils).comment(text)
   }
}
node('android') {
   // cleanup
   utils.scripts.bash('rm -rf signing')
}

@NonCPS
def Map generateParams(boolean isPullRequest, boolean isInternalOnly) {
   def params = [
         streamFlavor      : "Stable",
         serverFlavor      : "Stage",
         apkBuildType      : "Debug",
         hockeyApiToken    : "c190d98f211e4ed689ce441d0de9ef1d",
         hockeyAppId       : "",
         hockeyAppTeams    : [],
         qa_automation_mode: false
   ]

   def devTeam = "40021"
   def qaTeam = "77196"

   params.branch = (isPullRequest ? env.gitlabSourceBranch : env.GIT_BRANCH).replace("origin/", "")
   params.comment = (isPullRequest ? env.gitlabTriggerPhrase : env.COMMENT) ?: ""

   switch (params.branch) {
      case ~/^(develop)|(common\/.+)/:
         params << [
               streamFlavor  : "Stable",
               serverFlavor  : params.comment.contains("-server qa") ? "Qa" : "Stage",
               hockeyAppId   : "48de37eaf46ec363d392ae15ae521df6",
               hockeyAppTeams: [qaTeam, devTeam],
         ]
         break
      case ~/^(release\/.+)|(hotfix\/.+)/:
         if (params.comment.contains("-server prod")) {
            params << [
                  serverFlavor: "Prod",
                  hockeyAppId : "4fc6063859b3388635cb834dbb004324"
            ]
         } else if (params.comment.contains("-server perf")) {
            params << [
                  serverFlavor: "Perf",
                  hockeyAppId : "24c6abce67eb486291f601eaec8d06ca"
            ]
         } else {
            params << [
                  serverFlavor: "Preprod",
                  hockeyAppId : "790422bf7d324c3c92bb0411b04ce6eb"
            ]
         }
         params << [
               apkBuildType: "Release",
         ]
         break
      case ~/^social\/.+/:
         params << [
               streamFlavor  : "Social",
               hockeyAppId   : "421e85e3825848fd9034328a66546852",
               hockeyAppTeams: [qaTeam, "77190"]
         ]
         break
      case ~/^dtl\/.+/:
         params << [
               streamFlavor  : "Dtl",
               hockeyAppId   : "0093d3d64a8e425f9ec628fc7e26e294",
               hockeyAppTeams: [qaTeam, "77189"],
         ]
         break
      case ~/^messenger\/.+/:
         params << [
               streamFlavor  : "Messenger",
               hockeyAppId   : "5dc7e124dea64ac29aa99fe28cbd9087",
               hockeyAppTeams: [qaTeam, "77405"]
         ]
         break
      case ~/^smart-card\/.+/:
         params << [
               streamFlavor  : params.comment.contains("-smartcard mocked") ? "SmartCardMock" : "SmartCardNxtid",
               hockeyAppId   : "427d6a383bcf44e698227ea31c778d3b",
               hockeyAppTeams: [qaTeam, "77191"]
         ]
         break
      default:
         println "Branch '${params.branch}' is not supported"
         throw new IllegalArgumentException("Branch is not supported")
   }

   def buildArgs = [:]
   if (isInternalOnly) {
      if (!env.FORCED_SERVER_FLAVOR.isEmpty()) params.serverFlavor = env.FORCED_SERVER_FLAVOR
      if (!env.FORCED_STREAM_FLAVOR.isEmpty()) params.streamFlavor = env.FORCED_STREAM_FLAVOR
      if (!env.FORCED_APK_BUILD_TYPE.isEmpty()) params.apkBuildType = env.FORCED_APK_BUILD_TYPE
      if (!env.FORCED_API_ENDPOINT.isEmpty()) buildArgs << [api_endpoint: env.FORCED_API_ENDPOINT]
      if (!env.FORCED_API_UPLOADERY.isEmpty()) buildArgs << [api_uploadery: env.FORCED_API_UPLOADERY]
      if (params.serverFlavor == 'Integration') params.streamFlavor = 'Stable'
      //
      if (Boolean.valueOf(env.QA_AUTOMATION_MODE)) buildArgs << [qa_automation_mode: 'true']
   }
   params.buildArgs = buildArgs.collect { key, value -> "-P${key}=${value}" }.join(' ')


   def targetBranch
   if (isPullRequest) targetBranch = env.gitlabTargetBranch
   else switch (params.branch) {
      case ~/^common\/.+/:
         targetBranch = 'develop'
         break
      case ~/^(release\/.+)|(hotfix\/.+)|(develop)/:
         targetBranch = 'master'
         break
      case ~/^smart-card\/(?!dev).+/:
         targetBranch = 'smart-card/dev'
         break
      case ~/^social\/(?!dev).+/:
         targetBranch = 'social/develop'
         break
      case ~/^messenger\/(?!dev).+/:
         targetBranch = 'messenger/dev'
         break
      case ~/^dtl\/(?!dev).+/:
         targetBranch = 'dtl/dev'
         break
      default:
         targetBranch = 'develop'
         break
   }
   params.targetBranch = targetBranch

   return params
}

def boolean isPullRequest() {
   env.gitlabBranch != null
}

def boolean isInternalOnly() {
   Boolean.valueOf(env.INTERNAL_ONLY)
}

def getNotifier(utils) {
   isPullRequest() ? utils.notifiers.gitlab(this) : utils.notifiers.stub()
}

@NonCPS
def String generateReleaseNotes(buildParams, changelog, boolean isPullRequest) {
   StringBuilder text = new StringBuilder()
   changelog = changelog?.split('\\n').collect { s -> "* $s" }.join('\n')
   if (isPullRequest) {
      // title
      text
            .append("## $env.gitlabMergeRequestTitle").append('\n')
            .append("[Pull Request Link](${env.gitlabSourceRepoHttpUrl.replaceAll('.git', '')}/merge_requests/$env.gitlabMergeRequestIid)").append('\n')
      // description
      if (env.gitlabMergeRequestDescription) text
            .append("### Description").append('\n')
            .append(env.gitlabMergeRequestDescription).append('\n')
      // comment
      if (env.gitlabTriggerPhrase) text
            .append("### Comment").append('\n')
            .append(env.gitlabTriggerPhrase.replaceAll("(\\r\\n)|(\\r)", "\n")).append('\n')
      // author
      text
            .append("#### Author").append('\n')
            .append(env.gitlabUserEmail).append('\n')
      // changelog
      if (changelog) text
            .append("#### Commits").append('\n')
            .append(changelog)
   } else {
      text
            .append("## Manual build").append('\n')
            .append("### Branch").append('\n')
            .append(buildParams.branch).append('\n')
      if (env.COMMENT) text
            .append("### Comment").append('\n')
            .append(env.COMMENT).append('\n')
      // changelog
      if (changelog) text
            .append("#### Commits").append('\n')
            .append(changelog)
   }
   return text.toString()
}

def String changelog(utils, targetBranch, headBranch) {
   if (!(targetBranch =~ /^origin.*/)) targetBranch = "origin/$targetBranch"
   if (!(headBranch =~ /^origin.*/)) headBranch = "origin/$headBranch"
   utils.scripts.bash("git rev-list $targetBranch..$headBranch --oneline")
}

@NonCPS
def Map hockeyInstallationLinks(actions) {
   actions.collectEntries { action ->
      if (action.getDisplayName().toLowerCase() =~ /.*install.*/) [public: action.getUrlName()]
      else if (action.getDisplayName().toLowerCase() =~ /.*configuration.*/) [private: action.getUrlName()]
      else [:]
   }
}
