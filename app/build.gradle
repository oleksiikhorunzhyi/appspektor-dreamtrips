apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'io.fabric'

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'http://dl.bintray.com/techery/android' }
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://jitpack.io" }
    maven { url "https://clojars.org/repo/" }
    maven { url "http://nexus.idamob.ru/content/groups/public" }
    maven { url "http://dl.bintray.com/populov/maven" }
    maven { url "https://github.com/shaubert/maven-repo/raw/master/snapshots" }
    maven { url 'http://dl.bintray.com/amulyakhare/maven' }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    // App version
    def versionMajor = 1
    def versionMinor = 6
    def versionPatch = 0
    def versionBuild = 0  // bump for dogfood builds, public betas, etc.
    //
    // flavor codes
    String DEV_CODE = "dev"
    String EXTERNAL_CODE = "external"
    String[] BUILD_CODES = [DEV_CODE, EXTERNAL_CODE]
    //
    String DTL_CODE = "dtl"
    String MSGR_CODE = "msgr"
    String SOCIAL_CODE = "social"
    String STABLE_CODE = "stable"
    String[] STREAM_CODES = [DTL_CODE, MSGR_CODE, SOCIAL_CODE, STABLE_CODE]
    //
    String STAGE_CODE = "stage"
    String PERF_CODE = "perf"
    String PROD_CODE = "prod"
    String[] CONFIG_CODES = [STAGE_CODE, PERF_CODE, PROD_CODE]
    //
    def APP_ID_BASE = "com.worldventures.dreamtrips"

    defaultConfig {
        applicationId APP_ID_BASE

        archivesBaseName = "DreamTrips"
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        minSdkVersion 15
        targetSdkVersion 22

        multiDexEnabled true

        buildConfigField 'String', 'AuthApiUrl', '"https://dreamTripsApi.dreamtrips.com/AuthenticationService/AuthenticationService.svc"'
        buildConfigField 'String', 'SharedServicesApi', '"http://sharedservices.worldventures.biz"'
        buildConfigField 'String', 'WorldVenturesApi', '"http://dtapp-auth-1384786496.us-west-2.elb.amazonaws.com"'
        buildConfigField 'String', 'S3Api', '"http://dtapp.s3.amazonaws.com"'
        buildConfigField 'String', 'GoogleTrackingID', '"UA-41142403-2"'
        buildConfigField 'String', 'AWS_ACCOUNT_ID', '"503446126408"'
        buildConfigField 'String', 'API_VERSION', '"2"'
        buildConfigField 'boolean', 'SOCIAL_ENABLED', 'true'
        buildConfigField 'String', 'HOCKEY_APP_ID', '"e25cd69fc32f855a3aab0f85f9ee8e58"'
        resValue "string", "facebook_app_id", "761062457321921"
        //
        buildConfigField 'String', 'COGNITO_POOL_ID', '"us-east-1:1ac30be0-63da-444a-b667-4a63cc32bb39"'
        buildConfigField 'String', 'COGNITO_ROLE_UNAUTH', '"arn:aws:iam::503446126408:role/Cognito_dtapp_prod_poolUnauth_DefaultRole"'
        buildConfigField 'String', 'COGNITO_ROLE_AUTH', '"arn:aws:iam::503446126408:role/Cognito_dtapp_prod_poolAuth_DefaultRole"'
        buildConfigField 'String', 'BUCKET_NAME', '"dtappprd"'
        buildConfigField 'String', 'BUCKET_ROOT_PATH', '"dtuploads/"'
        buildConfigField 'long', 'API_TIMEOUT_SEC', '60'
        buildConfigField 'boolean', 'CRASHLYTICS_DISABLED', 'false'
        ext.enableCrashlytics = true
        //
        buildConfigField 'String', 'versionMajor', "\"${versionMajor}\""
        buildConfigField 'String', 'versionMinor', "\"${versionMinor}\""
        buildConfigField 'String', 'versionPatch', "\"${versionPatch}\""
        buildConfigField 'String', 'versionBuild', "\"${versionBuild}\""
        //
        manifestPlaceholders = [:]
        manifestPlaceholders['fabricApiKey'] = "21da61424102fe8cf2f861fa914442a098312625"
        manifestPlaceholders['surveyApiToken'] = "7bfd74f4bc1d1273aa54a5b0b6f7a8bd4c8eeaf36c6e902a1f0d66398f6707ba"
    }

    flavorDimensions "build", "stream", "config"

    productFlavors {
        ///////////////////////////////////////////////////////////////////////////
        // build-dimension flavors
        ///////////////////////////////////////////////////////////////////////////
        dev {
            dimension "build"
            minSdkVersion 23
            ext.enableCrashlytics = false
            buildConfigField 'boolean', 'CRASHLYTICS_DISABLED', 'true'
        }
        external {
            dimension "build"
            // don't setup minSdkVersion to inherit the one from the "flavors" dimension
        }
        ///////////////////////////////////////////////////////////////////////////
        // stream-dimension flavors
        ///////////////////////////////////////////////////////////////////////////
        dtl {
            dimension "stream"
            //
            versionName = "${versionMajor}.${versionMinor}.${versionPatch}-${DTL_CODE}-${versionBuild}"
            // TODO : generate HOCKEY_APP_ID for every stream and set up here
            buildConfigField 'String', 'HOCKEY_APP_ID', '"e25cd69fc32f855a3aab0f85f9ee8e58"'
        }
        msgr {
            dimension "stream"
            //
            versionName = "${versionMajor}.${versionMinor}.${versionPatch}-${MSGR_CODE}-${versionBuild}"
            // TODO : generate HOCKEY_APP_ID for every stream and set up here
            buildConfigField 'String', 'HOCKEY_APP_ID', '"e25cd69fc32f855a3aab0f85f9ee8e58"'
        }
        social {
            dimension "stream"
            //
            versionName = "${versionMajor}.${versionMinor}.${versionPatch}-${SOCIAL_CODE}-${versionBuild}"
            // TODO : generate HOCKEY_APP_ID for every stream and set up here
            buildConfigField 'String', 'HOCKEY_APP_ID', '"e25cd69fc32f855a3aab0f85f9ee8e58"'
        }
        stable {
            dimension "stream"
            //
            versionName = "${versionMajor}.${versionMinor}.${versionPatch}-${STABLE_CODE}-${versionBuild}"
            // TODO : generate HOCKEY_APP_ID for every stream and set up here
            buildConfigField 'String', 'HOCKEY_APP_ID', '"e25cd69fc32f855a3aab0f85f9ee8e58"'
        }
        ///////////////////////////////////////////////////////////////////////////
        // config-dimension flavors
        ///////////////////////////////////////////////////////////////////////////
        stage {
            dimension "config"
            //
            versionName = "${versionMajor}.${versionMinor}.${versionPatch}-stage" + "-${versionBuild}"
            buildConfigField 'String', 'DreamTripsApi', '"http://ec2-54-200-42-102.us-west-2.compute.amazonaws.com/"'
        }
        perf {
            dimension "config"
            // the same as stage except API endpoint
            versionName = "${versionMajor}.${versionMinor}.${versionPatch}-perf" + "-${versionBuild}"

            buildConfigField 'String', 'DreamTripsApi', '"http://dtapp-perf.worldventures.biz/"'
        }
        prod {
            dimension "config"
            //
            manifestPlaceholders = [surveyApiToken: "48bf60f3d43c8f8b1acb157cedeb2d334acb38e1e2c04e820d7a72168fd584aa",
                                    fabricApiKey  : "972fab2f24886a59812168179ef81f2858329206"]
            //
            buildConfigField 'String', 'DreamTripsApi', '"http://dtapp.worldventures.biz"'
            buildConfigField 'String', 'HOCKEY_APP_ID', '"4fc6063859b3388635cb834dbb004324"'
            buildConfigField 'String', 'S3Api', '"http://dtappprd.s3.amazonaws.com"'
            buildConfigField 'long', 'API_TIMEOUT_SEC', '15'
        }
    }

    variantFilter { variant ->
        variant.ignore = true
        //
        String build = variant.flavors.get(0).name.toLowerCase() // dev / external
        String stream = variant.flavors.get(1).name.toLowerCase() // dtl / msgr / social / stable
        String config  = variant.flavors.get(2).name.toLowerCase() // stage / perf / prod
        //
        if (variant.buildType.name.equals("debug") && config.equals(STAGE_CODE)) {
            variant.ignore = false
            return
        }
        //
        if (variant.buildType.name.equals("release")) {
            if (build.equals(EXTERNAL_CODE) && containsAnyOf(config, STAGE_CODE, PERF_CODE)) {
                variant.ignore = false
            }
            if (build.equals(EXTERNAL_CODE) && stream.equals(STABLE_CODE) && config.equals(PROD_CODE)) {
                variant.ignore = false
            }
        }
    }

    android.applicationVariants.all { variant ->
        String flavorName = variant.flavorName.toLowerCase()
        String buildSuffix, streamSuffix, configSuffix
        //
        buildSuffix = oneOfSubstrings(flavorName, BUILD_CODES)
        streamSuffix = oneOfSubstrings(flavorName, STREAM_CODES)
        configSuffix = oneOfSubstrings(flavorName, CONFIG_CODES)
        //
        String generatedAppId = APP_ID_BASE
        //
        if (buildSuffix.equals(DEV_CODE)) generatedAppId += ".${buildSuffix}"
        if (!streamSuffix.equals(STABLE_CODE)) generatedAppId += ".${streamSuffix}"
        if (!configSuffix.equals(PROD_CODE)) generatedAppId += ".${configSuffix}"
        //
        variant.mergedFlavor.setApplicationId generatedAppId
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('debug.keystore')
        }
        release {
            Properties signingProperties = new Properties()
            def pFile = rootProject.file('signing/signing.properties')
            if (pFile.exists()) {
                signingProperties.load(new FileInputStream(pFile))
                storeFile rootProject.file("signing/" + signingProperties.storeFile)
                storePassword signingProperties.storePassword
                keyAlias signingProperties.keyAlias
                keyPassword signingProperties.keyPassword
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            // proguard
            def proConfigs = file('proguard-rules').listFiles().collect { it }
            proConfigs << getDefaultProguardFile('proguard-android-optimize.txt')
            proConfigs << file('dagger-proguard-keepnames.cfg')
            proguardFiles proConfigs
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = rootProject.ext.preDexLibs
    }
    lintOptions {
        disable 'MissingTranslation' // otherwise generated strings fucks you up
        abortOnError false
        checkReleaseBuilds false
        // lint doesn't like retrolambda https://github.com/evant/gradle-retrolambda/issues/96
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    useLibrary 'org.apache.http.legacy'
}

/**
 * Checks whether superstring contains one of given substrings.<br />
 * NOTE: case matters!
 */
def boolean containsAnyOf(String superstring, String... substrings) {
    if (substrings.length == 0 || (superstring == null || superstring.isEmpty())) return false;
    //
    for (int i = 0; i < substrings.length; i++) {
        if (superstring.contains(substrings[i])) return true
    }
    //
    return false;
}

/**
 * Get the first substring that given super contains.<br />
 * Returns empty String if no match.<br />
 * NOTE: case matters!
 */
def String oneOfSubstrings(String superstring, String... substrings) {
    if (substrings.length == 0 || (superstring == null || superstring.isEmpty())) return "";
    //
    for (int i = 0; i < substrings.length; i++) {
        if (superstring.contains(substrings[i])) return substrings[i]
    }
    //
    return "";
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // Di
    compile 'com.squareup.dagger:dagger:1.2.2'
    apt 'com.squareup.dagger:dagger-compiler:1.2.2'
    apt 'com.github.idamobile:dagger-proguard-helper-processor:1.0.1-SNAPSHOT'
    // Data storage, flow
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.snappydb:snappydb-lib:0.5.2'
    compile 'com.esotericsoftware.kryo:kryo:2.24.0'
    // Networking
    compile 'com.octo.android.robospice:robospice:1.4.14'
    compile 'com.octo.android.robospice:robospice-retrofit:1.4.14'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'
    compile 'com.google.code.gson:gson:2.4'
    // Media
    compile 'io.techery:ijkmediaplayer:0.4.0@aar'
    compile 'io.techery:ijkmediawidget:0.4.0@aar'
    // 3rd services
    compile 'com.amazonaws:aws-android-sdk-core:2.2.6'
    compile 'com.amazonaws:aws-android-sdk-s3:2.2.6'
    compile 'com.google.android.gms:play-services-maps:8.3.0'
    compile 'com.google.android.gms:play-services-analytics:8.3.0'
    compile 'com.google.android.gms:play-services-gcm:8.3.0'
    compile 'com.google.android.gms:play-services-location:8.3.0'
    compile 'me.dm7.barcodescanner:zxing:1.8.3'
    compile 'com.instabug.library:instabugsupport:1.7.1'
    compile 'net.hockeyapp.android:HockeySDK:3.6.2'
    compile 'com.facebook.android:facebook-android-sdk:3.23.1'
    compile('com.twitter.sdk.android:twitter:1.9.1@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile 'com.apptentive:apptentive-android:2.0.1@aar'
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'com.jakewharton.rxbinding:rxbinding-appcompat-v7:0.3.0'
    compile 'com.trello:rxlifecycle:0.4.0'
    compile 'com.trello:rxlifecycle-components:0.4.0'
    compile 'io.reactivex:rxjava-debug:1.0.3'
    // Ui
    compile 'com.github.zhangchaoxu:sweet-alert-dialog:e8920134fc'
    compile 'com.android.support:design:23.1.1'
    compile 'com.github.traex.expandablelayout:library:1.3'
    compile 'com.facebook.fresco:fresco:0.8.1'
    compile 'com.facebook.fresco:imagepipeline-okhttp:0.8.1'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:cardview-v7:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'com.rengwuxian.materialedittext:library:2.1.4'
    compile 'com.getbase:floatingactionbutton:1.10.0'
    compile 'com.github.flavienlaurent.datetimepicker:library:0.0.2'
    compile 'com.github.afollestad.material-dialogs:core:0.8.5.2'
    compile 'com.github.afollestad.material-dialogs:commons:0.8.5.2'
    compile 'com.orhanobut:dialogplus:1.10@aar'
    compile 'com.kbeanie:image-chooser-library:1.5.2@aar'
    compile 'com.github.techery:material-range-bar:d5f61f2f50'
    compile 'com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:0.8.4'
    compile 'com.github.frankiesardo:linearlistview:1.0.1@aar'
    compile 'me.relex:circleindicator:1.1.5@aar'
    compile 'com.ms-square:expandableTextView:0.1.4'
    compile 'com.github.daimajia:AndroidSwipeLayout:f66ac6942b066c46a6f2a3db951f3e99740160e7'
    compile 'com.eowise:recyclerview-stickyheaders:0.5.2@aar'
    compile 'mbanje.kurt:fabbutton:1.2.1'
    compile 'com.github.man4ik:poly-picker:fce2e41f009b2c9b1287ee1000431710939e22e6'
    compile 'com.github.techery:AndroidImageZoomCrop:1.0.7'
    compile 'com.github.dmytrodanylyk.shadow-layout:library:1.0.3'
    compile 'me.leolin:ShortcutBadger:1.1.3@aar'
    compile 'com.github.techery:ProperRatingBar:v0.0.3'
    compile 'com.sothree.slidinguppanel:library:3.2.1'
    compile 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    // Util
    compile 'com.github.hotchemi:permissionsdispatcher:1.2.1@aar'
    apt 'com.github.hotchemi:permissionsdispatcher-processor:1.2.1'
    compile 'com.google.maps.android:android-maps-utils:0.4'
    compile 'pl.charmas.android:android-reactive-location:0.8@aar'
    compile 'com.intellij:annotations:12.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:support-annotations:23.1.1'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'com.jakewharton.timber:timber:4.1.0'
    compile 'com.innahema:collections-query:0.2.9'
    compile 'net.danlew:android.joda:2.9.0'
    compile 'com.badoo.mobile:android-weak-handler:1.1'
    compile 'frankiesardo:icepick:3.1.0'
    apt 'frankiesardo:icepick-processor:3.1.0'
    devCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    externalCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    compile 'com.github.pwittchen:networkevents:2.1.2'
    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.1.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'org.assertj:assertj-core:1.7.1'
}

apply plugin: "de.felixschulze.gradle.hockeyapp"

hockeyapp {
    variantToApiToken = [
            stageDebug  : 'ba6b9a28a53947f287f62fdaed6086ad',
            stageRelease: 'c0cccff726ec45f28237523fa3918769',
            perfDebug   : 'a4bdfbd09db6462d9e6b41e84124d0f7',
            prodRelease : '7bfe2802eb7947968190f0a0d1555fe2',
    ]
    variantToApplicationId = [
            stageDebug  : '48de37eaf46ec363d392ae15ae521df6',
            stageRelease: 'e25cd69fc32f855a3aab0f85f9ee8e58',
            perfDebug   : '48de37eaf46ec363d392ae15ae521df6',
            prodRelease : '4fc6063859b3388635cb834dbb004324',
    ]
    variantToStatus = [
            stageDebug  : '2',
            stageRelease: '2',
            perfDebug   : '2',
            prodRelease : '1'
    ]
    notes = rootProject.hasProperty('releaseNotes') ? rootProject.releaseNotes : ''
    notesType = 1
    releaseType = 0
    notify = 0
    repositoryUrl = 'https://github.com/techery/DreamTrips-Android'
    teamCityLog = rootProject.hasProperty('teamCity')
}
