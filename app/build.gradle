apply from: "$rootProject.projectDir/buildsystem/android-config.gradle"
apply from: "$rootProject.projectDir/buildsystem/app-config.gradle"
apply from: "$rootProject.projectDir/buildsystem/env-default-config.gradle"
apply from: "$rootProject.projectDir/buildsystem/env-flavor-config.gradle"
apply from: "$rootProject.projectDir/buildsystem/env-flavor-utils.gradle"
apply from: "$rootProject.projectDir/buildsystem/plugin-dependencies.gradle"
apply from: "$rootProject.projectDir/buildsystem/module-dependencies.gradle"
apply from: "$rootProject.projectDir/buildsystem/deps-utils.gradle"
apply from: "$rootProject.projectDir/buildsystem/module-utils.gradle"
apply from: "$rootProject.projectDir/buildsystem/code-analysis.gradle"
//
apply plugin: 'com.android.application'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply plugin: 'newrelic'
apply plugin: 'com.github.ben-manes.versions'

def deps = project.ext.moduleDependencies
def coreDeps = project.ext.coreDependencies

android {
   compileSdkVersion project.ext.androidConfig.compileSdk
   buildToolsVersion project.ext.androidConfig.buildTools

   defaultConfig {
      applicationId = project.ext.appConfig.applicationId
      versionCode project.ext.appConfig.buildVersionCode()
      versionName project.ext.appConfig.buildVersionName()
      archivesBaseName = project.ext.appConfig.archivesBaseName
      //
      minSdkVersion project.ext.androidConfig.minSdk
      targetSdkVersion project.ext.androidConfig.targetSdk
      //
      multiDexEnabled true
      javaCompileOptions {
         annotationProcessorOptions {
            includeCompileClasspath = false
         }
      }
   }

   flavorDimensions "build", "stream", "config"

   productFlavors {
      // "build"-dimension flavors:
      dev {
         dimension "build"
         applicationIdSuffix = 'dev'
         minSdkVersion 23
      }
      devpremarshmallow {
         dimension "build"
         applicationIdSuffix = 'dev'
      }
      external { dimension "build" }
      // "stream"-dimension flavors:
      dtl {
         dimension "stream"
         applicationIdSuffix = 'dtl'
      }
      messenger {
         dimension "stream"
         applicationIdSuffix = 'messenger'
      }
      social {
         dimension "stream"
         applicationIdSuffix = 'social'
      }
      smartcardmock {
         dimension "stream"
         applicationIdSuffix = 'smartcard'
      }
      smartcardemulmode {
         dimension "stream"
         applicationIdSuffix = 'smartcard'
      }
      smartcardnxtid {
         dimension "stream"
         applicationIdSuffix = 'smartcard'
      }
      stable { dimension "stream" }
      // "config"-dimension flavors:
      stage {
         dimension "config"
         applicationIdSuffix = 'stage'
      }
      preprod {
         dimension "config"
         applicationIdSuffix = 'preprod'
      }
      integration {
         dimension "config"
         applicationIdSuffix = 'integration'
      }
      perf {
         dimension "config"
         applicationIdSuffix = 'perf'
      }
      prod {
         dimension "config"
      }
   }

   variantFilter { variant ->
      variant.ignore = !project.ext.flavors.acceptVariant(variant)
   }

   android.applicationVariants.all { variant ->
      project.ext.flavors.applyConfig(variant)
      project.ext.flavors.applyVersionName(variant)

      variant.getCompileConfiguration().resolutionStrategy {
         cacheChangingModulesFor 0, 'seconds'
         force provideDep(coreDeps.rx.rxjava)
         force provideDep(coreDeps.domain.mappery)
         force provideDep(coreDeps.util.jetbrainsAnnotations)
      }
   }

   signingConfigs {
      debug {
         storeFile rootProject.file('debug.keystore')
      }
      release {
         Properties signingProperties = new Properties()
         def pFile = rootProject.file('signing/signing.properties')
         if (pFile.exists()) {
            signingProperties.load(new FileInputStream(pFile))
            storeFile rootProject.file("signing/" + signingProperties.storeFile)
            storePassword signingProperties.storePassword
            keyAlias signingProperties.keyAlias
            keyPassword signingProperties.keyPassword
         }
      }
   }

   buildTypes {
      debug {
         debuggable true
         signingConfig signingConfigs.debug
         applicationIdSuffix ".debug"
         versionNameSuffix "-debug"
      }
      release {
         minifyEnabled true
         shrinkResources true
         signingConfig signingConfigs.release
         // proguard
         def proConfigs = file('proguard-rules').listFiles().collect { it }
         proConfigs << getDefaultProguardFile('proguard-android-optimize.txt')
         proConfigs << file('dagger-proguard-keepnames.cfg')
         proConfigs << file('core/dagger-proguard-keepnames.cfg')
         proConfigs << file('social/dagger-proguard-keepnames.cfg')
         proConfigs << file('wallet/dagger-proguard-keepnames.cfg')
         setProguardFiles proConfigs
      }
   }

   compileOptions {
      sourceCompatibility project.ext.pluginDependencies.versions.java
      targetCompatibility project.ext.pluginDependencies.versions.java
   }
   testOptions {
      unitTests.returnDefaultValues = true
   }
   dexOptions {
      javaMaxHeapSize "4g"
      // preDexLibraries = project.ext.androidConfig.preDex // multidex fails when predex is disabled
   }
   lintOptions {
      xmlReport false
      disable 'MissingTranslation', 'RestrictedApi', 'ExtraTranslation'
   }
   packagingOptions {
      exclude 'LICENSE.txt'
      exclude 'META-INF/services/javax.annotation.processing.Processor'
      exclude 'META-INF/LICENSE.txt'
      exclude 'META-INF/NOTICE.txt'
   }
   useLibrary 'org.apache.http.legacy'

   dataBinding {
      enabled = true
   }

   sourceSets {
      main.res.srcDirs += 'src/main/resSocial'
      main.res.srcDirs += 'src/main/resMessenger'
      main.res.srcDirs += 'src/main/resSession'
   }
}

// disable new relic for non-release tasks

task('disableNR') {
   doLast {
      logger.info("[newrelic] newRelicInstrumentTask will be disabled")
      try {
         newRelicInstrumentTask.enabled = false
         newRelicDeinstrumentTask.enabled = false
      } catch (Exception e) {
         logger.error("[newrelic] an error occured attempting to disable New Relic instrumentation." + "\n" + e.printStackTrace())
      }
      if (newRelicInstrumentTask.enabled == true) {
         logger.error("[newrelic] an error occured attempting to disable New Relic instrumentation.")
      } else {
         logger.info("[newrelic] newrelicInstrumentTask has been disabled")
      }
   }
}

tasks.whenTaskAdded { task ->
   if (task.name.startsWith("transformClassesWithDexFor") && (task.name.toLowerCase().contains("dev") || task.name.toLowerCase().contains("debug"))) {
      task.dependsOn disableNR
   }
}

// increase max errors output

tasks.withType(JavaCompile) {
   options.compilerArgs << "-Xmaxerrs" << "400"
}
// configuration & dependencies

configurations.all { // todo remove it when we drop compile dependency
   exclude group: 'xpp3', module: 'xpp3'
   exclude group: 'com.intellij', module: 'annotations'
}

repositories {
   deps.repos.each { it.call(owner) }
}

dependencies {
   implementation fileTree(dir: 'libs', include: ['*.jar'])
   applyDependencies(owner, deps.modules)
   applyDependencies(owner, deps.domain)
   applyDependencies(owner, deps.data)
   applyDependencies(owner, deps.networking)
   applyDependencies(owner, deps.smartcard)
   applyDependencies(owner, deps.services)
   applyDependencies(owner, deps.media)
   applyDependencies(owner, deps.presentation)
   applyDependencies(owner, deps.ui)
   applyDependencies(owner, deps.util.findAll {
      ![
            deps.util.leakcanary,
            deps.util.leakcanaryNoOp,
      ].contains(it.value)
   })
   applyDependencies(owner, deps.test)
   applyDependencies(owner, deps.annotationProcesssor)

   devImplementation provideDep(deps.util.leakcanary)
   devpremarshmallowImplementation provideDep(deps.util.leakcanary)
   externalImplementation provideDep(deps.util.leakcanaryNoOp)
}

bindModuleTestsToAppFlavor(":wallet", "Smartcardmock")
bindModuleTestsToAppFlavor(":social", "Social")
