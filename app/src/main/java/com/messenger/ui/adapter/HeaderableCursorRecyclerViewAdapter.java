package com.messenger.ui.adapter;


import android.database.Cursor;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.view.ViewGroup;

import java.util.ArrayList;
import java.util.List;

public abstract class HeaderableCursorRecyclerViewAdapter<VH extends RecyclerView.ViewHolder> extends CursorRecyclerViewAdapter<RecyclerView.ViewHolder> {

   private static final int HEADER_VIEW_TYPE_BASE = 666;

   private List<View> headerViews;

   public HeaderableCursorRecyclerViewAdapter(Cursor cursor) {
      super(cursor);
      headerViews = new ArrayList<>();
   }

   public void addHeaderView(View headerView) {
      if (!headerViews.contains(headerView)) {
         headerViews.add(headerView);
         notifyDataSetChanged();
      }
   }

   public void removeHeaderView(View headerView) {
      if (headerViews.remove(headerView)) {
         notifyDataSetChanged();
      }
   }

   public int getHeaderViewCount() {
      return headerViews.size();
   }

   // Every headerView has to have a view type by its own.
   // As a result, view type for every header view is generated by the formula:
   // HEADER_VIEW_TYPE_BASE + position of headerView in list
   @Override
   public final int getItemViewType(int position) {
      int headerCount = getHeaderViewCount();
      return position < headerCount ? HEADER_VIEW_TYPE_BASE + position : getElementViewType(position - headerCount);
   }

   protected abstract int getElementViewType(int position);

   @Override
   public final void onBindViewHolder(RecyclerView.ViewHolder holder, int i) {
      int headerCount = getHeaderViewCount();
      if (i > headerCount - 1) { super.onBindViewHolder(holder, i - headerCount); }
   }

   @Override
   public final void onBindViewHolderCursor(RecyclerView.ViewHolder holder, Cursor cursor) {
      //noinspection all
      onBindElementViewHolderCursor((VH) holder, cursor);
   }

   protected abstract void onBindElementViewHolderCursor(VH holder, Cursor cursor);

   @Override
   public final RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
      int headerViewType = viewType - HEADER_VIEW_TYPE_BASE;
      return headerViewType >= 0 && headerViewType < headerViews.size() ? new HeaderViewHolder(headerViews.get(headerViewType)) : onCreateElementViewHolder(parent, viewType);
   }

   protected abstract RecyclerView.ViewHolder onCreateElementViewHolder(ViewGroup parent, int viewType);

   @Override
   public int getItemCount() {
      return super.getItemCount() + getHeaderViewCount();
   }

   private class HeaderViewHolder extends RecyclerView.ViewHolder {

      public HeaderViewHolder(View itemView) {
         super(itemView);
      }
   }

}
