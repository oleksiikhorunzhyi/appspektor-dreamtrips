package com.worldventures.dreamtrips.modules.feed.view.cell.base;

import android.app.Dialog;
import android.support.annotation.MenuRes;
import android.support.annotation.StringRes;
import android.view.View;
import android.widget.ImageView;

import com.innahema.collections.query.queriables.Queryable;
import com.techery.spares.session.SessionHolder;
import com.techery.spares.ui.view.cell.AbstractCell;
import com.worldventures.dreamtrips.R;
import com.worldventures.dreamtrips.core.navigation.ActivityRouter;
import com.worldventures.dreamtrips.core.navigation.FragmentCompass;
import com.worldventures.dreamtrips.core.navigation.NavigationBuilder;
import com.worldventures.dreamtrips.core.navigation.Route;
import com.worldventures.dreamtrips.core.navigation.wrapper.NavigationWrapper;
import com.worldventures.dreamtrips.core.navigation.wrapper.NavigationWrapperFactory;
import com.worldventures.dreamtrips.core.session.UserSession;
import com.worldventures.dreamtrips.core.utils.tracksystem.TrackingHelper;
import com.worldventures.dreamtrips.modules.common.model.User;
import com.worldventures.dreamtrips.modules.common.presenter.Presenter;
import com.worldventures.dreamtrips.modules.feed.bundle.FeedItemDetailsBundle;
import com.worldventures.dreamtrips.modules.feed.event.FeedItemAnalyticEvent;
import com.worldventures.dreamtrips.modules.feed.event.ProfileClickedEvent;
import com.worldventures.dreamtrips.modules.feed.model.FeedItem;
import com.worldventures.dreamtrips.modules.feed.model.comment.Comment;
import com.worldventures.dreamtrips.modules.feed.view.custom.FeedActionPanelView;
import com.worldventures.dreamtrips.modules.feed.view.popup.FeedItemMenuBuilder;
import com.worldventures.dreamtrips.modules.feed.view.util.CommentCellHelper;
import com.worldventures.dreamtrips.modules.feed.view.util.FeedActionPanelViewActionHandler;
import com.worldventures.dreamtrips.modules.feed.view.util.FeedItemCommonDataHelper;

import javax.inject.Inject;

import butterknife.InjectView;
import butterknife.OnClick;
import butterknife.Optional;
import cn.pedant.SweetAlert.SweetAlertDialog;

public abstract class FeedItemCell<T extends FeedItem> extends AbstractCell<T> {

    FeedItemCommonDataHelper feedItemCommonDataHelper;
    CommentCellHelper commentCellHelper;

    @Optional
    @InjectView(R.id.comment_preview)
    View commentPreview;
    @Optional
    @InjectView(R.id.comment_divider)
    View commentDivider;
    @InjectView(R.id.actionView)
    FeedActionPanelView actionView;
    @InjectView(R.id.edit_feed_item)
    ImageView editFeedItem;

    @Inject
    FragmentCompass fragmentCompass;
    @Inject
    Presenter.TabletAnalytic tabletAnalytic;
    @Inject
    SessionHolder<UserSession> sessionHolder;
    @Inject
    FeedActionPanelViewActionHandler feedActionHandler;
    @Inject
    ActivityRouter activityRouter;

    private boolean syncUIStateWithModelWasCalled = false;
    //
    private NavigationWrapper navigationWrapper;

    public FeedItemCell(View view) {
        super(view);
        feedItemCommonDataHelper = new FeedItemCommonDataHelper(view.getContext());
        feedItemCommonDataHelper.attachView(view);
        if (commentPreview != null) {
            commentCellHelper = new CommentCellHelper(view.getContext());
            commentCellHelper.attachView(view);
        }
    }

    @Override
    public void afterInject() {
        super.afterInject();
        navigationWrapper = new NavigationWrapperFactory()
                .componentOrDialogNavigationWrapper(activityRouter, fragmentCompass, tabletAnalytic);
    }

    @Override
    protected void syncUIStateWithModel() {
        feedItemCommonDataHelper.set(getModelObject(), sessionHolder.get().get().getUser().getId(), false);
        feedItemCommonDataHelper.setOnEditClickListener(view -> onMore());
        if (commentCellHelper != null) {
            Comment comment = getModelObject().getItem().getComments() == null ? null :
                    Queryable.from(getModelObject().getItem().getComments())
                            .firstOrDefault();
            if (comment != null) {
                commentDivider.setVisibility(View.VISIBLE);
                commentPreview.setVisibility(View.VISIBLE);
                commentCellHelper.set(comment);
            } else {
                commentDivider.setVisibility(View.GONE);
                commentPreview.setVisibility(View.GONE);
            }
        }

        syncUIStateWithModelWasCalled = true;

        //trip is not generated by owner content, so more button is unavailable
        actionView.setState(getModelObject(), isForeignItem(getModelObject()));

        feedActionHandler.init(actionView, navigationWrapper);
        itemView.setOnClickListener(v -> openItemDetails());
    }

    private boolean isForeignItem(FeedItem feedItem) {
        return feedItem.getItem().getOwner() == null
                || sessionHolder.get().get().getUser().getId() == (feedItem.getItem().getOwner().getId());
    }

    @Override
    public void fillWithItem(T item) {
        syncUIStateWithModelWasCalled = false;
        super.fillWithItem(item);
        if (!syncUIStateWithModelWasCalled) {
            throw new IllegalStateException("super.syncUIStateWithModel was not called");
        }
    }

    @Optional
    @OnClick(R.id.comment_preview)
    void commentsPreviewClicked() {
        openItemDetails();
    }

    protected void openItemDetails() {
        Route detailsRoute = Route.FEED_ITEM_DETAILS;
        FeedItemDetailsBundle bundle = new FeedItemDetailsBundle(getModelObject());
        if (tabletAnalytic.isTabletLandscape()) {
            bundle.setSlave(true);
        }
        NavigationBuilder.create()
                .with(activityRouter)
                .data(bundle)
                .move(detailsRoute);
    }

    protected void showMoreDialog(@MenuRes int menuRes, @StringRes int headerDelete, @StringRes int textDelete) {
        editFeedItem.setEnabled(false);
        FeedItemMenuBuilder.create(itemView.getContext(), editFeedItem, menuRes)
                .onDelete(() -> showDeleteDialog(headerDelete, textDelete))
                .onEdit(this::onEdit)
                .dismissListener(menu -> editFeedItem.setEnabled(true))
                .show();
    }

    private void showDeleteDialog(@StringRes int headerDelete, @StringRes int textDelete) {
        Dialog dialog = new SweetAlertDialog(itemView.getContext(), SweetAlertDialog.WARNING_TYPE)
                .setTitleText(itemView.getResources().getString(headerDelete))
                .setContentText(itemView.getResources().getString(textDelete))
                .setConfirmText(itemView.getResources().getString(R.string.post_delete_confirm))
                .setConfirmClickListener(sDialog -> {
                    sDialog.dismissWithAnimation();
                    onDelete();
                });
        dialog.setCanceledOnTouchOutside(true);
        dialog.show();
    }

    protected void onDelete() {
        sendAnalyticEvent(TrackingHelper.ATTRIBUTE_DELETE);
    }

    protected void onEdit() {
        sendAnalyticEvent(TrackingHelper.ATTRIBUTE_EDIT);
    }

    private void sendAnalyticEvent(String eventType) {
        FeedItem feedItem = getModelObject();
        getEventBus().post(new FeedItemAnalyticEvent(eventType, feedItem.getItem().getUid(), feedItem.getType()));
    }

    protected abstract void onMore();

    @Optional
    @OnClick(R.id.feed_header_avatar)
    void eventOwnerClicked() {
        User user = getModelObject().getLinks().getUsers().get(0);
        getEventBus().post(new ProfileClickedEvent(user));

    }

    @Optional
    @OnClick(R.id.user_photo)
    void commentOwnerClicked() {
        User user = commentCellHelper.getComment().getOwner();
        getEventBus().post(new ProfileClickedEvent(user));

    }

}
