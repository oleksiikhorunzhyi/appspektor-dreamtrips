apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'org.jmailen.kotlinter'

afterEvaluate {
   def tasks = []
   if (project.plugins.hasPlugin('java') || project.plugins.hasPlugin('java-library')) {
      tasks.add('checkstyle')
      tasks.add('pmd')
      tasks.add('findbugsMain')
   }
   if (project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library')) {
      tasks.add('checkstyle')
      tasks.add('pmd')
   }
   if (project.plugins.hasPlugin('kotlin') || project.plugins.hasPlugin('kotlin-android')) {
      tasks.add('lintKotlin')
      tasks.add('detektCheck')
   }
   task('analyzeCode') {
      dependsOn tasks
   }
}

checkstyle {
   toolVersion = '8.3'
}

task checkstyle(type: Checkstyle) {
   description 'Check code standard'
   group 'code quality'

   configFile file("${project.rootDir}/quality/checkstyle/checkstyle.xml")
   configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/quality/checkstyle/suppressions.xml").absolutePath
   source 'src'
   include '**/*.java'
   exclude '**/gen/**', 'test*/**'
   classpath = files()

   reports {
      xml.enabled true
      html.enabled true
      html.stylesheet resources.text.fromFile("${project.rootDir}/quality/checkstyle/checkstyle-report-template.xsl")
   }
}

pmd {
   toolVersion = '5.8.1'
}

task pmd(type: Pmd) {
   description 'Identifying potential problems mainly dead code, duplicated code, cyclomatic complexity and overcomplicated expressions'
   group 'code quality'

   ignoreFailures = false
   ruleSetFiles = files("${project.rootDir}/quality/pmd/pmd-ruleset.xml")
   ruleSets = []

   source = fileTree('src/main/java')
   include '**/*.java'
   exclude '**/gen/**', 'test*/**'
   classpath = files()

   reports {
      xml.enabled = true
      html.enabled = true
   }
}

findbugs {
   toolVersion = '3.0.1'
}

/* Non-Working for Android */
tasks.withType(FindBugs) {
   description 'Find bugs mainly design flaws, bad practices, multithreaded correctness and code vulnerabilities.'
   group 'code quality'

   ignoreFailures = false
   effort = "max"
   reportLevel = "high"
   excludeFilter = file("${project.rootDir}/quality/findbugs/findbugs-filter.xml")

   include '**/*.java'
   exclude '**/gen/**'

   reports {
      xml.enabled = true
      html.enabled = !xml.enabled
   }
}

detekt {
   group 'code quality'

   version = pluginDependencies.versions.detekt
   profile("main") {
      config = "$project.rootDir/quality/detekt/detekt.yml"
      baseline = "$project.rootDir/quality/detekt/baseline.xml"
      plugins = "$project.rootDir/quality/detekt/detekt-techery-extensions.jar"
      input = "$projectDir/src"
      output = "$projectDir/build/reports/detekt"
      outputName = "detekt"
      filters = ".*/test.*/.*,.*/resources/.*,.*/tmp/.*"
      parallel = true
   }
}

// gradle plugin for https://ktlint.github.io/
kotlinter {
   group 'code quality'

   ignoreFailures = false
   indentSize = 3
   reporter = 'checkstyle'
}
