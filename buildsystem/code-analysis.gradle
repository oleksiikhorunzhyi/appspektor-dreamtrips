apply plugin: "checkstyle"
apply plugin: "pmd"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "org.jmailen.kotlinter"

afterEvaluate {
   it.task("analyzeCode") {
      def tasks = []
      if (project.plugins.hasPlugin("java")
            || project.plugins.hasPlugin("java-library")
            || project.plugins.hasPlugin("com.android.application")
            || project.plugins.hasPlugin("com.android.library")) {
         tasks.add('checkstyle')
         tasks.add('pmd')
      }
      if (project.plugins.hasPlugin("kotlin")
            || project.plugins.hasPlugin("kotlin-android")) {
         tasks.add('lintKotlin')
         tasks.add('detektCheck')
      }
      dependsOn tasks
   }
}

checkstyle {
   toolVersion = "8.3"
}

task checkstyle(type: Checkstyle) {
   configFile file("${project.rootDir}/quality/checkstyle/checkstyle.xml")
   configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/quality/checkstyle/suppressions.xml").absolutePath
   source 'src'
   include '**/*.java'
   exclude '**/gen/**', 'test*/**'
   classpath = files()

   reports {
      xml.enabled true
      html.enabled true
      html.stylesheet resources.text.fromFile("${project.rootDir}/quality/checkstyle/checkstyle-report-template.xsl")
   }
}

task pmd(type: Pmd) {
   ignoreFailures = false
   ruleSetFiles = files("${project.rootDir}/quality/pmd/pmd-ruleset.xml")
   ruleSets = []

   source 'src'
   include '**/*.java'
   exclude '**/gen/**'

   reports {
      xml.enabled = true
      html.enabled = true
      xml {
         destination file("$project.buildDir/reports/pmd/pmd.xml")
      }
      html {
         destination file("$project.buildDir/reports/pmd/pmd.html")
      }
   }
}

task findbugs(type: FindBugs) {
   ignoreFailures = false
   effort = "max"
   reportLevel = "high"
   excludeFilter = new File("${project.rootDir}/quality/findbugs/findbugs-filter.xml")
   classes = files("${project.rootDir}/build/intermediates/classes")

   source 'src'
   include '**/*.java'
   exclude '**/gen/**'

   reports {
      xml.enabled = false
      html.enabled = true
      xml {
         destination file("$project.buildDir/reports/findbugs/findbugs.xml")
      }
      html {
         destination file("$project.buildDir/reports/findbugs/findbugs.html")
      }
   }

   classpath = files()
}

detekt {
   version = pluginDependencies.versions.detekt
   profile("main") {
      config = "$project.rootDir/quality/detekt/detekt.yml"
      baseline = "$project.rootDir/quality/detekt/baseline.xml"
      input = "$projectDir/src"
      output = "$projectDir/build/reports/detekt"
      outputName = "detekt"
      filters = ".*/test.*/.*,.*/resources/.*,.*/tmp/.*"
      parallel = true
   }
}

// gradle plugin for https://ktlint.github.io/
kotlinter {
   ignoreFailures = false
   indentSize = 3
   reporter = 'checkstyle'
}
