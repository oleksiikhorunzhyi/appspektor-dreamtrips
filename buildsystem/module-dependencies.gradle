// todo rename this file to module-app-dependencies.gradle
apply from: "$rootProject.projectDir/buildsystem/module-core-dependencies.gradle"

ext {
   def roboelectricVersion = '3.1.2'

   moduleDependencies = [:]

   moduleDependencies.repos = [
         { it.maven { url 'http://dl.bintray.com/techery/android' } },
         { it.maven { url 'http://dl.bintray.com/populov/maven' } },
         { it.maven { url 'http://dl.bintray.com/amulyakhare/maven' } },
         { it.maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } },
         { it.maven { url 'https://mvn.jwplayer.com/content/repositories/releases/' } },
         { it.maven { url 'http://repository.jetbrains.com/all' } },
         { it.flatDir { dirs 'libs' } }
   ]
   coreDependencies.repos.each { moduleDependencies.repos << it }

   //modules
   moduleDependencies.modules = [
         core    : [impl: project(":core")],
         coreTest: [testImpl: project(":core-test")],
         wallet  : [impl: project(":wallet")],
   ]

   // domain
   moduleDependencies.domain = [
         jobExecutor: [impl: 'com.github.techery:job-executor:0.1.1'],
         eventbus   : [impl: 'de.greenrobot:eventbus:2.4.0'],
   ]
   // data
   def dbflowVersion = '2.2.1'
   moduleDependencies.data = [
         dbflow        : [impl: "com.raizlabs.android:DBFlow:$dbflowVersion"],
         dbflowCore    : [impl: "com.raizlabs.android:DBFlow-Core:$dbflowVersion"],
         dbflowCompiler: [a: "com.raizlabs.android:DBFlow-Compiler:$dbflowVersion"],
   ]
   // networking
   def smackVersion = '4.1.6'
   moduleDependencies.networking = [
         reactivenetwork: [impl: 'com.github.pwittchen:reactivenetwork:0.5.2'],
         // smack / xmpp
         smackAndroid   : [impl: "org.igniterealtime.smack:smack-android-extensions:$smackVersion"],
         smackTcp       : [impl: "org.igniterealtime.smack:smack-tcp:$smackVersion"],
   ]
   // services
   moduleDependencies.services = [
         // amazon
         amazonCore  : [impl: 'com.amazonaws:aws-android-sdk-core:2.2.6'],
         amazonS3    : [impl: 'com.amazonaws:aws-android-sdk-s3:2.2.6'],
         // google
         googleGcm   : [impl: "com.google.android.gms:play-services-gcm:${googleServicesVersion}"],
         googleVision: [impl: "com.google.android.gms:play-services-vision:${googleServicesVersion}"],

         twitter     : [impl: 'com.twitter.sdk.android:twitter:3.1.1@aar', config: { transitive = true }],
   ]
   // presentation frameworks
   def flowVersion = '0b702cdab7c639f94e37c792f0dbd7f4bf89a713'
   moduleDependencies.presentation = [
         mosbyViewstate      : [impl: "com.hannesdorfmann.mosby:viewstate:$mosbyVersion"],
         flow                : [impl: "com.github.almozavr.flow:flow:$flowVersion"],
         flowPath            : [impl: "com.github.almozavr.flow:flow-path:$flowVersion"],
         butterknife         : [impl: 'com.jakewharton:butterknife:6.1.0'],
         butterknifeProcessor: [a: 'com.jakewharton:butterknife:6.1.0'],
   ]
   // media
   moduleDependencies.media = [
         ijkPlayer     : [impl: 'io.techery:ijkmediaplayer:0.4.0@aar'],
         ijkWidget     : [impl: 'io.techery:ijkmediawidget:0.4.0@aar'],
         barcodescanner: [impl: 'me.dm7.barcodescanner:zxing:1.9'],
         picasso       : [impl: 'com.squareup.picasso:picasso:2.5.2'],
   ]
   // ui (views/layouts/widgets)
   moduleDependencies.ui = [
         googleRecyclerView    : [impl: "com.android.support:recyclerview-v7:${googleLibrariesVersion}"],
         // RecyclerView
         advrecyclerview       : [impl: 'com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:0.8.7'],
         linearlistview        : [impl: 'com.github.frankiesardo:linearlistview:1.0.1@aar'],
         recyclerviewsticky    : [impl: 'com.eowise:recyclerview-stickyheaders:0.5.2@aar'],
         // Dialogs
         androidUi             : [impl: 'com.github.markushi:android-ui:1.2'],
         sweetAlertDialog      : [impl: 'com.github.techery:sweet-alert-dialog:d82b5e4764'],
         materialDialogsCommons: [impl: 'com.github.afollestad.material-dialogs:commons:0.8.6.2'],
         // FAB
         floatingactionbutton  : [impl: 'com.getbase:floatingactionbutton:1.10.0'],
         // Layouts
         expandablelayout      : [impl: 'com.github.traex.expandablelayout:library:1.3'],
         shadowlayout          : [impl: 'com.github.dmytrodanylyk.shadow-layout:library:1.0.3'],
         slidinguppanel        : [impl: 'com.sothree.slidinguppanel:library:3.2.1'],
         swipelayout           : [impl: 'com.daimajia.swipelayout:library:1.2.0@aar'],
         // Text
         materialedittext      : [impl: 'com.rengwuxian.materialedittext:library:2.1.4'],
         expandableTextView    : [impl: 'com.ms-square:expandableTextView:0.1.4'],
         // Pickers
         datetimepicker        : [impl: 'com.github.flavienlaurent.datetimepicker:library:0.0.2'],
         // Other
         textdrawable          : [impl: 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'],
         properratingbar       : [impl: 'com.github.techery:properratingbar:0.0.5'],
         materialRangeBar      : [impl: 'com.github.techery:material-range-bar:db6fec9fdd'],
         shortuctbadger        : [impl: 'me.leolin:ShortcutBadger:1.1.3@aar'],
         jwPlayer              : [impl: 'com.longtailvideo.jwplayer:jwplayer-core:2.7.6+24'],
         jwPlayerCore          : [impl: 'com.longtailvideo.jwplayer:jwplayer-common:2.7.6+24'],
   ]
   coreDependencies.ui.each { moduleDependencies.ui << it }
   //
   def leakCanaryVersion = '1.3.1'
   moduleDependencies.util = [
         techeryImmutables      : [a: 'com.github.techery:immutables-gson-adapters-provider:0.1'],
         androidMapsUtils       : [impl: 'com.google.maps.android:android-maps-utils:0.4'],
         androidReactiveLocation: [impl: 'pl.charmas.android:android-reactive-location:0.8@aar'],
         deviceNames            : [impl: 'com.jaredrummler:android-device-names:1.1.2'],
         deviceprint            : [impl: [name: 'deviceprint-lib-release-2.3.3', ext: 'aar']],
         leakcanary             : [impl: "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"],
         leakcanaryNoOp         : [impl: "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"],
   ]

   moduleDependencies.annotationProcesssor = [
         // API
         janetHttpServiceProcessor: [a: "com.github.techery.janet-http:service-compiler:$janetHttpVersion"],
         mobileSdkCompiler        : [a: "com.worldventures.dreamtrips:mobilesdk-commons-compiler:$mobileSdkVersion"],
         daggerProcessor          : coreDependencies.di.daggerProcessor,
         daggerProguard           : coreDependencies.di.daggerProguard,
   ]
   coreDependencies.immutables.each { moduleDependencies.annotationProcesssor << it }
   // tests
   def powerMockVersion = '1.7.0RC4'
   moduleDependencies.test = [
         leakcanaryNoOp       : [testImpl: "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"],
         powermockJunit       : [testImpl: "org.powermock:powermock-module-junit4:$powerMockVersion"],
         powermockJunitRule   : [testImpl: "org.powermock:powermock-module-junit4-rule:$powerMockVersion"],
         powermockMockito     : [testImpl: "org.powermock:powermock-api-mockito2:$powerMockVersion"],
         powermockJunitXstream: [testImpl: "org.powermock:powermock-classloading-xstream:$powerMockVersion"],

         robolectric          : [testImpl: "org.robolectric:robolectric:$roboelectricVersion"],
         robolectricMultidex  : [testImpl: "org.robolectric:shadows-multidex:$roboelectricVersion"],

   ]
   coreDependencies.test.each { moduleDependencies.test << it }
}
