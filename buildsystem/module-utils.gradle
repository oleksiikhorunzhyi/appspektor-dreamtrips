ext {
   generateTestHttpHelperFactory = { moduleName ->
      afterEvaluate {
         project.tasks.withType(JavaCompile) {
            if (!it.toString().contains("UnitTest")) {
               println "Janet http.factory.class.suffix=$moduleName was added to $it"
               options.compilerArgs << "-Ajanet.http.factory.class.suffix=$moduleName"
            }
         }
      }
   }

   addModuleTestToAppTasks = { listOfTasks, moduleName, moduleTestTask ->
      listOfTasks.all { t ->
         println("Task " + t.name + " depends on " + moduleTestTask)
         t.dependsOn moduleTestTask
         t.finalizedBy tasks.create("copyTestResult${t.name}", Copy) {
            from "${project(moduleName).buildDir.absolutePath}/test-results/${(moduleTestTask =~ ":(.*):(.*)") [0][2]}/"
            into "${project.buildDir.absolutePath}/test-results/${t.name}"
            include "*.xml"
         }
      }
   }

   bindModuleTestsToAppFlavor = { moduleName, flavorConfigName ->
      def appUnitTestsDebugTasks = tasks.withType(Test).matching { task -> task.name.matches("(.+)$flavorConfigName(.*)DebugUnitTest(.*)") }
      def appUnitTestsReleaseTasks = tasks.withType(Test).matching { task -> task.name.matches("(.+)$flavorConfigName(.*)ReleaseUnitTest(.*)") }

      addModuleTestToAppTasks(appUnitTestsDebugTasks, moduleName, "$moduleName:testDebugUnitTest")
      addModuleTestToAppTasks(appUnitTestsReleaseTasks, moduleName, "$moduleName:testReleaseUnitTest")
   }
}